{"version":3,"sources":["components/ListItems.js","components/addListItem.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","props","className","role","aria-label","item","map","index","key","_id","tabIndex","title","task","deadline","onClick","removeFromListItems","mapProps","AddListItem","handleChange","e","setState","target","name","value","state","submitAddItem","bind","this","console","log","url","data","axios","post","form","code","window","location","reload","placeholder","onChange","Component","List","ListItems","getAndSetListItems","a","result","id","delete","App","style","textAlign","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9639e7b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './list.css';\r\n\r\nexport const ListItem = (props) => {\r\n  let mapProps = (props) => {\r\n    return props.item.map((item, index) => {\r\n      return (<div key={`li${index}${item._id}`} className=\"card-container\" role=\"contentinfo\" >\r\n        <div className=\"card-content\">\r\n          <h4 tabIndex={index} aria-label={item.title} className=\"task-title\">{item.title}</h4>\r\n          <p className=\"task-info\">{item.task}</p>\r\n          <p className=\"task-deadline\">{item.deadline}</p>\r\n          <div className=\"card-btn_row\">\r\n            <button onClick={() => props.removeFromListItems(item._id)} className=\"card-btn card-btn_delete\">Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>)\r\n    })\r\n  }\r\n\r\n  return <div className=\"list-container\" role=\"contentinfo\" aria-label=\"info-card\">\r\n    {mapProps(props)}\r\n  </div>\r\n}\r\n\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './list.css';\r\n\r\n\r\nclass AddListItem extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      title: '',\r\n      task: '',\r\n      deadline: '',\r\n    }\r\n    this.submitAddItem = this.submitAddItem.bind(this);\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  async submitAddItem() {\r\n    let { task, title, deadline } = this.state;\r\n    console.log('deadline: ', deadline);\r\n    console.log('title: ', title);\r\n    console.log('task: ', task);\r\n    let baseUrl = 'http://localhost:3020/';\r\n    let end = 'addTask';\r\n    let url = `${baseUrl}${end}`;\r\n    console.log('url1: ', url);\r\n\r\n    let data = { title, task, deadline }\r\n    console.log('data: ', data);\r\n    let form = await axios.post(url, data);\r\n    console.log('data: ', form);\r\n    if (form.code === -1) {\r\n      console.log('some error');\r\n    } else {\r\n      window.location.reload()\r\n    }\r\n  }\r\n  render() {\r\n    const { title, task, deadline } = this.state;\r\n    return (\r\n      <div className='add-task_container'>\r\n        <div className='add-task_form'>\r\n          <h3>Add a Task:</h3>\r\n          <input\r\n            placeholder='title'\r\n            value={title}\r\n            name={'title'}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            placeholder='task'\r\n            value={task}\r\n            name={'task'}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input\r\n            placeholder='deadline'\r\n            value={deadline}\r\n            name={'deadline'}\r\n            onChange={this.handleChange}\r\n          />\r\n        </div>\r\n        <button className=\"card-btn card-btn_add\" onClick={this.submitAddItem}>Add Item</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddListItem;","import React, { Component } from 'react';\r\nimport { ListItem } from './ListItems';\r\nimport axios from 'axios';\r\nimport AddListItem from './addListItem';\r\nconsole.log('ListItem: ', ListItem);\r\n\r\nexport default class List extends Component {\r\n  state = {\r\n    ListItems: []\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await this.getAndSetListItems()\r\n  }\r\n\r\n  getAndSetListItems = async () => {\r\n    let baseUrl = 'http://localhost:3020/';\r\n    let end = 'getTasks';\r\n    let url = `${baseUrl}${end}`;\r\n    console.log('url: ', url);\r\n    let data = await axios.post(url);\r\n    console.log('data: ', data);\r\n    if (data.code === -1) {\r\n      console.log('some error');\r\n    } else {\r\n      await this.setState({ ListItems: data.data.result.data });\r\n    }\r\n  }\r\n\r\n  removeFromListItems = async (item) => {\r\n    let baseUrl = 'http://localhost:3020/';\r\n    let end = 'deleteTask';\r\n    let id = item;\r\n    let url = `${baseUrl}${end}/${id}`;\r\n    let deletedData = await axios.delete(url);\r\n    if (deletedData.data.code === 0) {\r\n      window.location.reload()\r\n    }\r\n  }\r\n  render() {\r\n    console.log(this.state);\r\n    console.log('theprops', this.props);\r\n    return (\r\n      <div>\r\n        <AddListItem />\r\n        <ListItem\r\n          item={this.state.ListItems}\r\n          removeFromListItems={(e) =>\r\n            (this.removeFromListItems(e))\r\n          }\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport './App.css';\r\nimport List from './components/List';\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <main className=\"App\" aria-label=\"app-start\" role=\"main\">\r\n      <header className=\"App-header\">\r\n        <h1 aria-label=\"TaDone!\" style={{ textAlign: 'center' }}>\r\n          TaDone!\r\n        </h1>\r\n        <List />\r\n      </header>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}